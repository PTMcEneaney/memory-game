{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paget\\\\Homework\\\\memory-game\\\\src\\\\App.js\";\nimport Tile from \"./components/Tile\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Counter from \"./components/Counter\";\nimport _ from \"lodash\";\nimport tiles from \"./tiles.json\";\nimport React from 'react'; // import logo from './logo.svg';\n\nimport './index.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      current: 0,\n      high: 0,\n      tiles\n    };\n\n    this.random = () => {\n      let randomFunc = () => {\n        return Math.floor(Math.random() * 100);\n      };\n\n      let tilesTransformed = this.state.tiles;\n      tilesTransformed.map(tile => {\n        tile.sortNum = randomFunc();\n        return tile;\n      });\n\n      let sortedTiles = _.sortBy(tilesTransformed, ['sortNum']);\n\n      this.setState({\n        tiles: sortedTiles\n      });\n    };\n\n    this.resetChosen = () => {\n      let chosenTiles = this.state.tiles;\n      chosenTiles.map(tile => {\n        tile.chosen = false;\n        return tile;\n      });\n      this.setState({\n        tiles: sortedTiles\n      });\n    };\n\n    this.handleClick = objectid => {\n      let index = this.state.tiles.findIndex(x => x.id === objectid);\n\n      if (!this.state.tiles[index].chosen) {\n        this.state.tiles[index].chosen = true;\n        this.setState({\n          tiles\n        });\n        console.log(this.state.tiles[index]); // this.setState( {score: score + 1})\n\n        this.state.current = this.state.current + 1;\n        console.log(this.state.current);\n\n        if (this.state.current >= 12) {\n          alert(\"You win!!\");\n          this.state.current = 0;\n          this.state.score = 0;\n        }\n\n        this.random();\n      } else {\n        alert(\"already guessed!\");\n        this.state.high = this.state.current;\n        this.state.current = 0;\n        this.random();\n      } // this.state.tiles[index].chosen = true;\n\n    };\n  }\n\n  componentDidMount() {\n    this.random();\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Counter, {\n      current: this.state.current,\n      high: this.state.high,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.tiles.map(tiles => React.createElement(Tile, {\n      id: tiles.id,\n      key: tiles.id,\n      name: tiles.name,\n      image: tiles.image,\n      chosen: tiles.chosen,\n      onClick: () => this.handleClick(tiles.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\paget\\Homework\\memory-game\\src\\App.js"],"names":["Tile","Wrapper","Jumbotron","Counter","_","tiles","React","App","Component","state","current","high","random","randomFunc","Math","floor","tilesTransformed","map","tile","sortNum","sortedTiles","sortBy","setState","resetChosen","chosenTiles","chosen","handleClick","objectid","index","findIndex","x","id","console","log","alert","score","componentDidMount","bind","render","name","image"],"mappings":"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","sourcesContent":["import Tile from \"./components/Tile\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Counter from \"./components/Counter\";\nimport _ from \"lodash\";\n\nimport tiles from \"./tiles.json\";\nimport React from 'react';\n// import logo from './logo.svg';\nimport './index.css';\n\nclass App extends React.Component {\n  state = {\n    current: 0,\n    high: 0,\n    tiles\n  }\n  componentDidMount() {\n    this.random();\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  random = () => {\n    let randomFunc = () => {\n      return Math.floor(Math.random() * 100)\n    }\n    let tilesTransformed = this.state.tiles;\n    tilesTransformed.map(tile => {\n      tile.sortNum = randomFunc();\n      return tile;\n    });\n    let sortedTiles = _.sortBy(tilesTransformed, ['sortNum']);\n\n    this.setState({ tiles: sortedTiles})\n  }\n\n  resetChosen = () => {\n    let chosenTiles = this.state.tiles;\n    chosenTiles.map(tile => {\n      tile.chosen = false;\n      return tile;\n    });\n\n    this.setState({ tiles: sortedTiles})\n\n  }\n  \n\n  handleClick = (objectid) => {\n    let index = this.state.tiles.findIndex(x => x.id === objectid);\n    if (!this.state.tiles[index].chosen) {\n      this.state.tiles[index].chosen = true\n      this.setState( {tiles} );\n      console.log(this.state.tiles[index]);\n      // this.setState( {score: score + 1})\n      this.state.current = this.state.current + 1;\n      console.log(this.state.current)\n      if (this.state.current >= 12) {\n        alert(\"You win!!\")\n        this.state.current = 0;\n        this.state.score = 0;\n      }\n      this.random();\n    } else {\n      alert(\"already guessed!\")\n      this.state.high = this.state.current;\n      this.state.current = 0;\n      this.random();\n      \n\n    }\n\n    // this.state.tiles[index].chosen = true;\n    }\n\n  render() {\n    return (\n      <div>\n      <Counter current={this.state.current} high={this.state.high} />\n      <Jumbotron /> \n      <Wrapper>\n        {this.state.tiles.map(tiles => (\n            <Tile\n            id={tiles.id}\n            key={tiles.id}\n            name={tiles.name}\n            image={tiles.image}\n            chosen={tiles.chosen}\n            onClick={ () => this.handleClick(tiles.id) }\n          />\n        ))}\n      </Wrapper>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}