{"version":3,"sources":["components/Tile/index.js","components/Wrapper/index.js","components/Jumbotron/index.js","components/Counter/index.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","react_default","a","createElement","className","onClick","alt","name","src","image","Wrapper","children","Jumbotron","Counter","current","high","App","state","tiles","random","tilesTransformed","_this","map","tile","sortNum","Math","floor","sortedTiles","_","sortBy","setState","resetChosen","chosenTiles","chosen","handleClick","objectid","index","findIndex","x","id","alert","this","bind","_this2","components_Counter","components_Jumbotron","components_Wrapper","components_Tile","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8492b92.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Tile(props) {\n\n    return (\n        <div className=\"card button\" onClick={props.onClick}>\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} className=\"bookImg\" />\n            </div>\n        {/* <span onClick={() => props.removeTile(props.id)} className=\"remove\">ùòÖ</span> */}\n        </div>\n    );\n};\n\nexport default Tile;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid mt-5 bg-dark\">\n            <div className=\"container text-center\">\n                <h1 className=\"display-4\">Bookworm!</h1>\n                <p className=\"lead\">Test your memory! Can you click all 12 books without any duplicates?</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Counter(props) {\n    return(\n        <nav className=\"navbar fixed-top navbar-light bg-light\">\n            <div className=\"container\">\n                <div className=\"float-left\">\n                    <h2>Bookworm</h2>\n                </div>\n                <div className=\"float-right\">\n                    <h3>Score: {props.current} | High Score: {props.high}</h3>\n                </div>\n            </div>\n        </nav>\n        )\n    }\n\n\nexport default Counter;","import Tile from \"./components/Tile\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Counter from \"./components/Counter\";\nimport _ from \"lodash\";\n\nimport tiles from \"./tiles.json\";\nimport React from 'react';\nimport './index.css';\n\nclass App extends React.Component {\n  // set initial state values\n\n  state = {\n    current: 0,\n    high: 0,\n    tiles\n  }\n\n  // randomzie books on load and bind click event\n  componentDidMount() {\n    this.random();\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  // randomize function that reorders the state.tiles \n  random = () => {\n    let randomFunc = () => {\n      return Math.floor(Math.random() * 100)\n    }\n    let tilesTransformed = this.state.tiles;\n    tilesTransformed.map(tile => {\n      tile.sortNum = randomFunc();\n      return tile;\n    });\n    let sortedTiles = _.sortBy(tilesTransformed, ['sortNum']);\n\n    this.setState({ tiles: sortedTiles})\n  }\n\n  //reset state.tiles.chosen values to false when win/lose condition is met\n  resetChosen = () => {\n    let chosenTiles = this.state.tiles;\n    chosenTiles.map(tile => {\n      tile.chosen = false;\n      return tile;\n    });\n    this.setState({ tiles: chosenTiles})\n  }\n  \n  // onClick function whenever a book tile is clicked - controls both win and loss conditions\n  handleClick = (objectid) => {\n    let index = this.state.tiles.findIndex(x => x.id === objectid);\n\n    // if the clicked tile has not been clicked yet\n    if (!this.state.tiles[index].chosen) {\n      this.state.tiles[index].chosen = true\n      this.setState( {tiles} );\n\n      //increasing current score (state variable)\n      this.setState({ current: this.state.current + 1 })\n\n      // if user doesn't choose any dupes they win!\n      if (this.state.current >= 12) {\n        alert(\"You win!!\")\n        this.setState({current: 0, high: 0})\n        this.resetChosen();\n      }\n    } else {\n      // if the clicked tile was already clicked\n      alert(\"Oops! You already guessed that!\")\n      if (this.state.current >= this.state.high) {\n              //logging the highest score, and resetting current to 0\n              this.setState({current: 0, high: this.state.current })\n      } else {\n              this.setState({current: 0})\n      }\n      this.resetChosen();\n    }\n    //after user guesses, randomize tile array no matter what\n    this.random();\n    }\n\n  render() {\n    return (\n      <div>\n      <Counter current={this.state.current} high={this.state.high} />\n      <Jumbotron /> \n      <Wrapper>\n        {this.state.tiles.map(tiles => (\n            <Tile\n            id={tiles.id}\n            key={tiles.id}\n            name={tiles.name}\n            image={tiles.image}\n            chosen={tiles.chosen}\n            onClick={ () => this.handleClick(tiles.id) }\n          />\n        ))}\n      </Wrapper>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}